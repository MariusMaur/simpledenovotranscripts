import pandas as pd

# Read configuration directly from snakemake.config
CONFIG = config

def get_samples():
    samples_dict = {}
    with open(CONFIG["samples_table"], 'r') as f:
        for line in f:
            row = line.strip().split('\t')
            if len(row) == 3:
                species_id, r1, r2 = row
                long_reads = "NA"
            elif len(row) == 4:
                species_id, r1, r2, long_reads = row
            else:
                # Handle unexpected formats or log them
                continue
            samples_dict[species_id] = {"r1": r1, "r2": r2, "long_reads": long_reads}
    return samples_dict


SAMPLES = get_samples()

rule all:
    input:
        expand("2_trimmomatic/{sample}/{sample}.R1.paired.trimmed.fastq.gz", sample=SAMPLES.keys()),
        expand("2_trimmomatic/{sample}/{sample}.R1.unpaired.trimmed.fastq.gz", sample=SAMPLES.keys()),
        expand("2_trimmomatic/{sample}/{sample}.R2.paired.trimmed.fastq.gz", sample=SAMPLES.keys()),
        expand("2_trimmomatic/{sample}/{sample}.R2.unpaired.trimmed.fastq.gz", sample=SAMPLES.keys()),
        expand("3_trinity/{sample}/{sample}_trinity.Trinity.fasta", sample=SAMPLES.keys()),
        expand("5_transdecoder/{sample}/{sample}.trinity.AA.fa", sample=SAMPLES.keys())

rule trimmomatic:
    input:
        r1 = lambda wildcards: SAMPLES[wildcards.sample]["r1"],
        r2 = lambda wildcards: SAMPLES[wildcards.sample]["r2"]
    output:
        r1_paired = "2_trimmomatic/{sample}/{sample}.R1.paired.trimmed.fastq.gz",
        r1_unpaired = "2_trimmomatic/{sample}/{sample}.R1.unpaired.trimmed.fastq.gz",
        r2_paired = "2_trimmomatic/{sample}/{sample}.R2.paired.trimmed.fastq.gz",
        r2_unpaired = "2_trimmomatic/{sample}/{sample}.R2.unpaired.trimmed.fastq.gz"
    resources:
        mem=32*1024,  # 32G in MB
        cpu=16,
        time="02:00:00"
    params:
        rule_name="trimmomatic",
        trimmomatic_options=config['trimmomatic_options']
    shell:
        """
        slurm_scripts/trimmomatic_fastq.slurm {wildcards.sample} {input.r1} {input.r2} "{params.trimmomatic_options}"
        """


rule trinity:
    input:
        r1_paired = "2_trimmomatic/{sample}/{sample}.R1.paired.trimmed.fastq.gz",
        r2_paired = "2_trimmomatic/{sample}/{sample}.R2.paired.trimmed.fastq.gz"
    params:
        long_reads = lambda wildcards: SAMPLES[wildcards.sample].get("long_reads", "NA"),
        rule_name="trinity"
    output:
        trinity = "3_trinity/{sample}/{sample}_trinity.Trinity.fasta"
    resources:
        mem=128*1024,  
        cpu=32,
        time="72:00:00"
    shell:
        """
        slurm_scripts/trinity.slurm {wildcards.sample} {input.r1_paired} {input.r2_paired} {params.long_reads}
        """

rule transdecoder:
    input:
        trinity_phase2 = "3_trinity/{sample}/{sample}_trinity.Trinity.fasta"
    output:
        transdecoder = "5_transdecoder/{sample}/{sample}.trinity.AA.fa"
    params:
        rule_name="transdecoder"
    resources:
        mem=16*1024, 
        cpu=4,
        time="02:00:00"
    shell:
        """
        slurm_scripts/transdecoder.slurm {wildcards.sample}
        """
